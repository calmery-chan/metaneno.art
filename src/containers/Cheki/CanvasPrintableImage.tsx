import { css } from "@emotion/react";
import { useCallback, useEffect, useState } from "react";
import {
  CHEKI_PRINTABLE_IMAGE_HEIGHT,
  CHEKI_PRINTABLE_IMAGE_WIDTH,
} from "~/constants/cheki";
import { useSelector } from "~/domains";
import { selectors } from "~/domains/cheki";
import { calculateCanvasPositionAndSize } from "~/domains/cheki/utils";
import { getShareUrlById, useDisplayable } from "~/utils/cheki";

// Styles

const container = css`
  flex-grow: 1;
  height: fit-content;
  background: black;
`;

// Main

const Scissors: React.FC = () => (
  <svg
    x={CHEKI_PRINTABLE_IMAGE_WIDTH - 116 - 64}
    y="64"
    width="116"
    height="48"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M98.934 36.255c0 1.801 1.594 3.91 3.877 5.126 1.462.78 3.119 1.137 4.545.983 1.276-.139 2.211-.65 2.632-1.44.17-.32.256-.685.256-1.088 0-1.801-1.594-3.91-3.877-5.126-2.876-1.533-6.23-1.32-7.177.458-.17.318-.256.683-.256 1.087zm16.906 3.6a7.79 7.79 0 01-.909 3.703c-1.206 2.263-3.442 3.78-6.296 4.274-2.741.474-5.746-.062-8.459-1.508-4.154-2.215-6.838-6.175-6.838-10.088 0-1.09.208-2.13.619-3.096l-3.241-1.613 10.767-5.73 7.25 3.764c.269.143.533.31.788.497 3.839 2.249 6.319 6.093 6.319 9.798zM98.935 11.734c0 .403.086.769.255 1.087.948 1.777 4.302 1.99 7.178.458 2.282-1.216 3.876-3.325 3.876-5.127 0-.403-.085-.769-.255-1.087-.947-1.777-4.301-1.991-7.178-.458-2.282 1.217-3.876 3.325-3.876 5.127zm16.906-3.602c0 3.705-2.48 7.55-6.319 9.798a6.526 6.526 0 01-.782.494L71.827 38.288c-1.873.998-4.144 1.054-6.397.156-2.083-.83-3.845-2.37-4.834-4.228l-.569-1.066 18.53-9.979-18.53-10.04.569-1.066c.99-1.857 2.751-3.398 4.834-4.227 2.253-.898 4.523-.844 6.392.153l17.398 9.437 4.747-2.557a7.849 7.849 0 01-.63-3.118c0-3.914 2.685-7.874 6.84-10.089 5.702-3.039 12.321-1.798 14.754 2.767a7.778 7.778 0 01.91 3.7v.001zM0 24a4.008 4.008 0 118.017.002A4.008 4.008 0 010 24zm22.46 0a4.007 4.007 0 118.016 0 4.008 4.008 0 01-8.015 0zM48.926 28.007a3.857 3.857 0 01-.782-.078 4.21 4.21 0 01-.751-.229 3.728 3.728 0 01-.354-.169 3.699 3.699 0 01-.655-.433 4.006 4.006 0 01-.556-.559 3.813 3.813 0 01-.434-.652 3.827 3.827 0 01-.3-.724 4.287 4.287 0 01-.098-.381 3.782 3.782 0 01-.058-1.177c.014-.128.034-.26.058-.387.028-.128.058-.258.097-.382s.083-.249.133-.37c.05-.12.105-.238.168-.354a3.806 3.806 0 01.7-.945c.091-.094.19-.183.29-.266a4.29 4.29 0 011.009-.602 4.54 4.54 0 01.37-.133 4.305 4.305 0 01.768-.154c.263-.025.528-.025.79 0a4.58 4.58 0 01.768.155 4.135 4.135 0 011.062.502 3.694 3.694 0 01.608.498 3.682 3.682 0 01.497.608c.075.108.142.22.203.337.06.116.118.235.168.354.05.121.094.246.133.37a4.44 4.44 0 01.154.768c.012.133.02.265.02.396a3.673 3.673 0 01-.08.782c-.025.13-.058.257-.094.381a4.57 4.57 0 01-.133.37c-.05.12-.108.238-.169.354-.06.116-.127.23-.201.337-.072.108-.15.216-.232.315a3.373 3.373 0 01-.266.294 4.413 4.413 0 01-.608.5 4.174 4.174 0 01-1.83.655c-.132.013-.264.02-.395.02z"
      fill="#787878"
    />
  </svg>
);

const Twitter: React.FC = () => (
  <svg
    width="272"
    height="64"
    viewBox="0 0 272 64"
    x={CHEKI_PRINTABLE_IMAGE_WIDTH - 272 - 64}
    y={CHEKI_PRINTABLE_IMAGE_HEIGHT - 64 - 64}
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M20.365 63.975a44.533 44.533 0 0017.385-2.91 44.428 44.428 0 0014.88-9.424 44.269 44.269 0 0010.03-14.453 44.153 44.153 0 003.599-17.204 32.32 32.32 0 005.937-11.358 1.754 1.754 0 00-.582-1.822 1.768 1.768 0 00-1.905-.218 7.563 7.563 0 01-8.666-1.52 15.603 15.603 0 00-5.01-3.646 15.646 15.646 0 00-17.375 2.967 16.508 16.508 0 00-4.365 7.193 16.468 16.468 0 00-.248 8.404c-13.44.8-22.666-5.56-30.048-14.278a1.726 1.726 0 00-3.009.96 38.603 38.603 0 002.907 22.98 38.755 38.755 0 0015.547 17.212A27.027 27.027 0 011.51 55.977a1.807 1.807 0 00-1.485 1.48 1.795 1.795 0 00.923 1.88 44.24 44.24 0 0019.417 4.638M130.003 31.042c-.166 4.33-1.245 7.78-3.235 10.352-1.991 2.57-4.645 3.856-7.963 3.856-1.36 0-2.563-.29-3.608-.87a6.246 6.246 0 01-2.439-2.514c-1.625 2.19-3.807 3.285-6.544 3.285-1.592 0-2.986-.465-4.18-1.394-1.195-.945-2.074-2.28-2.638-4.006-.547-1.725-.713-3.683-.498-5.872.498-4.147 1.833-7.482 4.007-10.003 2.173-2.522 4.835-3.783 7.987-3.783 2.439 0 4.537.564 6.296 1.692l1.567 1.046-1.269 14.606c-.282 2.306.515 3.459 2.389 3.459 1.41 0 2.588-.896 3.534-2.688.962-1.808 1.493-4.114 1.592-6.917.282-5.54-.871-9.82-3.459-12.84-2.571-3.02-6.345-4.529-11.322-4.529-3.168 0-5.988.813-8.46 2.439-2.455 1.609-4.404 3.898-5.848 6.868-1.426 2.952-2.23 6.32-2.413 10.102-.266 5.806.895 10.244 3.483 13.313 2.588 3.085 6.47 4.628 11.646 4.628 1.393 0 2.87-.166 4.429-.497 1.559-.316 2.828-.689 3.807-1.12l.921 4.13c-1.012.664-2.381 1.195-4.106 1.593a21.765 21.765 0 01-5.151.622c-4.528 0-8.361-.87-11.496-2.613-3.118-1.725-5.441-4.288-6.967-7.689-1.526-3.4-2.206-7.523-2.04-12.367.198-4.578 1.252-8.676 3.16-12.292 1.924-3.633 4.545-6.437 7.863-8.41 3.334-1.991 7.091-2.987 11.272-2.987 4.18 0 7.788.871 10.824 2.613 3.036 1.725 5.317 4.214 6.843 7.465 1.526 3.252 2.198 7.026 2.016 11.322zm-24.884 2.837c-.182 2.156-.016 3.79.498 4.902.531 1.095 1.377 1.642 2.538 1.642.78 0 1.493-.348 2.14-1.045.664-.697 1.211-1.692 1.642-2.986l.996-11.347a5.965 5.965 0 00-1.543-.199c-1.858 0-3.293.73-4.305 2.19-.995 1.443-1.651 3.724-1.966 6.843zM141.996 17.804l.274 3.16c1.858-2.438 4.421-3.658 7.689-3.658 2.804 0 4.894.838 6.271 2.514 1.393 1.675 2.115 4.197 2.165 7.564v17.344h-8.411V27.733c0-1.36-.274-2.356-.821-2.986-.548-.648-1.543-.971-2.986-.971-1.642 0-2.862.647-3.658 1.941v19.01h-8.386V17.805h7.863zM162.003 31.017c0-2.687.522-5.076 1.567-7.166 1.045-2.107 2.547-3.724 4.504-4.853 1.958-1.128 4.255-1.692 6.893-1.692 4.031 0 7.208 1.253 9.53 3.758 2.323 2.488 3.484 5.88 3.484 10.177v.299c0 4.197-1.17 7.531-3.509 10.003-2.322 2.455-5.474 3.682-9.455 3.682-3.832 0-6.91-1.144-9.232-3.433-2.323-2.306-3.575-5.425-3.757-9.357l-.025-1.418zm8.385.523c0 2.488.39 4.313 1.17 5.474.78 1.161 1.932 1.742 3.459 1.742 2.986 0 4.512-2.298 4.578-6.893v-.846c0-4.827-1.543-7.241-4.628-7.241-2.804 0-4.322 2.082-4.554 6.246l-.025 1.518zM216.696 29.922c0 4.894-1.103 8.668-3.309 11.322-2.19 2.654-5.284 3.981-9.282 3.981-4.031 0-7.15-1.335-9.356-4.006-2.206-2.67-3.309-6.436-3.309-11.297v-6.619c0-4.893 1.095-8.667 3.284-11.322C196.931 9.327 200.041 8 204.055 8c4.015 0 7.125 1.335 9.332 4.006 2.206 2.671 3.309 6.445 3.309 11.322v6.594zm-8.385-7.689c0-2.604-.341-4.545-1.021-5.822-.68-1.294-1.758-1.941-3.235-1.941-1.443 0-2.496.597-3.16 1.791-.647 1.195-.995 3.003-1.045 5.425v9.256c0 2.704.34 4.687 1.02 5.948.681 1.244 1.759 1.866 3.235 1.866 1.427 0 2.48-.606 3.16-1.817.681-1.227 1.029-3.143 1.046-5.748v-8.958zM232.099 25.22l3.907-7.416h8.709l-7.092 13.114 7.44 13.81h-8.759l-4.23-7.963-4.155 7.963h-8.809l7.465-13.81-7.067-13.114h8.809l3.782 7.415zM259.944 45.225c-4.131 0-7.474-1.227-10.028-3.682-2.555-2.472-3.833-5.682-3.833-9.63v-.697c0-2.754.506-5.184 1.518-7.29 1.029-2.107 2.522-3.733 4.479-4.878 1.958-1.161 4.28-1.742 6.968-1.742 3.782 0 6.768 1.178 8.958 3.534 2.189 2.339 3.284 5.607 3.284 9.804v3.26h-16.672c.299 1.51.954 2.695 1.966 3.558 1.012.862 2.323 1.294 3.932 1.294 2.654 0 4.728-.93 6.221-2.787l3.832 4.529c-1.045 1.443-2.53 2.596-4.454 3.459-1.908.846-3.965 1.268-6.171 1.268zm-.946-21.449c-2.455 0-3.915 1.626-4.38 4.877h8.461v-.647c.033-1.343-.307-2.38-1.02-3.11-.714-.747-1.734-1.12-3.061-1.12z"
      fill="#787878"
    />
  </svg>
);

export const ChekiCanvasPrintableImage: React.FC<{ id: string }> = ({ id }) => {
  const dataUrl = useSelector(selectors.imageDataUrl);
  const direction = useSelector(selectors.imageDirection);
  const [displayable, setDisplayable] = useState<{
    height: number;
    width: number;
    x: number;
    y: number;
  } | null>(null);
  const [printableDisplayable, setPrintableDisplayable] = useState<{
    height: number;
    width: number;
    x: number;
    y: number;
  } | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [shareUrl, setShareUrl] = useState<string | null>(null);

  // Side Effects

  useEffect(() => {
    setShareUrl(getShareUrlById(id));
  }, [id]);

  // Events

  const handleUpdateDisplayable = useCallback((displayable) => {
    setDisplayable(displayable);

    setPrintableDisplayable(
      calculateCanvasPositionAndSize(displayable, {
        height: CHEKI_PRINTABLE_IMAGE_HEIGHT,
        width: CHEKI_PRINTABLE_IMAGE_WIDTH,
      })
    );
  }, []);

  // Refs

  const ref = useDisplayable<HTMLDivElement>(handleUpdateDisplayable);

  // Render

  if (previewUrl) {
    return <img className="h-full object-contain w-full" src={previewUrl} />;
  }

  if (!shareUrl) {
    return null;
  }

  return (
    <div css={container} ref={ref}>
      {displayable && (
        <svg
          className="absolute"
          height={displayable.height}
          width={displayable.width}
          style={{
            left: `${displayable.x}px`,
            top: `${displayable.y}px`,
          }}
          xmlns="http://www.w3.org/2000/svg"
          xmlnsXlink="http://www.w3.org/1999/xlink"
        >
          {printableDisplayable && (
            <svg
              height={printableDisplayable.height}
              viewBox={`0 0 ${CHEKI_PRINTABLE_IMAGE_WIDTH} ${CHEKI_PRINTABLE_IMAGE_HEIGHT}`}
              width={printableDisplayable.width}
              x={printableDisplayable.x}
              y={printableDisplayable.y}
            >
              <rect fill="#FFF" width="100%" height="100%" />
              <Scissors />
              {/* <ChekiQrCode url={shareUrl} /> */}
              <Twitter />
            </svg>
          )}
        </svg>
      )}
    </div>
  );
};
